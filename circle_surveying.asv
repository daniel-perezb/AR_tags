clear 
close all
%% Main assuming 4 servers in a circle

filename = '4_bases.csv'; % Change this to the path of your file
data = readtable(filename, 'FileType', 'text','VariableNamingRule','preserve','Delimiter',',');

% Initialize an empty struct array for Points
Points = struct('location', {}, 'direction', {});

% Assuming there are multiple points stored in rows
for i = 1:height(data)
    % Extract location
    Points(i).location = [data.LocationX(i), data.LocationY(i), data.LocationZ(i)];
    
    % Extract direction - assuming it's stored in 9 columns as a 3x3 matrix
    Points(i).direction = [data.DirectionXX(i), data.DirectionXY(i), data.DirectionXZ(i);
                           data.DirectionYX(i), data.DirectionYY(i), data.DirectionYZ(i);
                           data.DirectionZX(i), data.DirectionZY(i), data.DirectionZZ(i)];
end
%% Ploting all points

% Plot settings
axisLength = 0.5; % Length of the axes to draw

for i = 1:size(Points.location,1)
    plot3(Points.location(i,1), Points.location(i,2), Points.location(i,3), 'ok', 'MarkerSize', 10, 'MarkerFaceColor', 'k');
    % Draw axes lines from point
    quiver3(Points.location(i,1), Points.location(i,2), Points.location(i,3), Points.direction(1,1)*axisLength, Points.direction(1,2)*axisLength, Points.direction(1,3)*axisLength, 'r', 'LineWidth', 2);
    quiver3(Points.location(i,1), Points.location(i,2), Points.location(i,3), Points.direction(2,1)*axisLength, Points.direction(2,2)*axisLength, Points.direction(2,3)*axisLength, 'g', 'LineWidth', 2);
    quiver3(Points.location(i,1), Points.location(i,2), Points.location(i,3), Points.direction(3,1)*axisLength, Points.direction(3,2)*axisLength, Points.direction(3,3)*axisLength, 'b', 'LineWidth', 2);
    hold on
end
drawnow

grid on;
xlabel('X');
ylabel('Y');
zlabel('Z');
axis equal; % Keep aspect ratio equal for clarity
view(3); % Set a 3D view

%% Compute distances between points
% Master terminal 
master = 2;

% Function to calculate distances and transformation matrices
[origin_2_points, master_2_points] = calculate_distances_and_transforms(Points, master);

%%  If we wanna transform any of the points to the location
